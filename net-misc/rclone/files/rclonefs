#!/bin/sh

# Taken from https://github.com/rclone/rclone/wiki/rclone-mount-helper-script

# FL-8341: This script was rewritten to get rid of all bashisms in it in order
#          to make it runnable with any POSIX-compliant shell.

remote=$1
mountpoint=$2
shift 2

# Process -o parameters
while getopts :o: opts; do
    case $opts in
        o)
            params=$(printf "%s" "$OPTARG" | tr "," " ")
            for param in $params; do
                if [ "$param" = "rw"          ]; then continue; fi
                if [ "$param" = "ro"          ]; then continue; fi
                if [ "$param" = "dev"         ]; then continue; fi
                if [ "$param" = "suid"        ]; then continue; fi
                if [ "$param" = "exec"        ]; then continue; fi
                if [ "$param" = "auto"        ]; then continue; fi
                if [ "$param" = "nodev"       ]; then continue; fi
                if [ "$param" = "nosuid"      ]; then continue; fi
                if [ "$param" = "noexec"      ]; then continue; fi
                if [ "$param" = "noauto"      ]; then continue; fi
                if [ "$param" = "x-systemd.*" ]; then continue; fi
                trans="$trans --$param"
            done
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            ;;
    esac
done

# exec rclone
trans="$trans $remote $mountpoint"
# NOTE: do not try "mount --daemon" here, it does not play well with systemd automount, use '&'!
# NOTE: mount is suid and ignores pre-set PATHs -> specify explicitely
PATH=$PATH rclone mount $trans </dev/null >/dev/null 2>/dev/null &

# WARNING: this will loop forever if remote is actually empty!
until [ "`ls -l $mountpoint`" != 'total 0' ]; do
    sleep 1
done

